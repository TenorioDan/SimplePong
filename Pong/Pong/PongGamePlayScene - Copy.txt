#include "PongGamePlayScene.h"

#include <stdlib.h>		// srand, rand
#include <time.h>		// time


//PongGamePlayScene.cpp

PongGamePlayScene::PongGamePlayScene(Pong* pong) :
theGame(pong)
{

}

PongGamePlayScene::~PongGamePlayScene()
{
	delete ball;
	delete left_paddle;
	delete right_paddle;
	delete event_queue;
	delete thedude;
	delete pow;
	delete ball2;
}

bool PongGamePlayScene::setup()
{

	GE161::Game::theGame->framerate = 50;
	theGame->setWindowColor(100, 100, 255);
	GE161::Game::registerAsListener(GE161::Event::KEY_DOWN, this);
	GE161::Game::registerAsListener(GE161::Event::HIT_EVENT, this);
	// Rolling ball sprite sheet is from http://www.java-gaming.org/index.php?topic=21935.0.
	// It has 32 64x64 frames.
	texty1 = new GE161::Texty(GE161::Game::theGame->getRenderer(), GE161::Game::basePath() + "sample.ttf", 18, true);


	// Start the ball with its upper left in the middle of the window.
	ball = new GE161::GameObject(
	theGame->window()->clientWidth() / 2, theGame->window()->clientHeight() / 2);
	frameWidth_ = 64;
	frameHeight_ = 64;
	GE161::Sprite* ballSpriteSheet = new GE161::Sprite(frameWidth_, frameHeight_);

	ball2 = new GE161::GameObject(theGame->window()->clientWidth() / 2, theGame->window()->clientHeight() / 2);

	for (int row = 0; row < 4; row++)
	{
		for (int column = 0; column < 8; column++)
		{
			int f = ballSpriteSheet->makeFrame(
				GE161::Game::basePath() + "RollingBall.png",
				column*frameWidth_, row*frameHeight_);
			ballSpriteSheet->addFrameToSequence("Rolling", f);
		}
	}
	ball->attachSprite(ballSpriteSheet);
	ball2->attachSprite(ballSpriteSheet);

	//left_paddle = new GE161::GameObject(20, theGame->window()->clientHeight() / 2);
	right_paddle = new GE161::GameObject(theGame->window()->clientWidth() - 40, theGame->window()->clientHeight() / 2);
	paddle_frame_width = 20;
	paddle_frame_height = 100;
	GE161::Sprite* paddle_sprite_sheet = new GE161::Sprite(paddle_frame_width, paddle_frame_height);
	int p = paddle_sprite_sheet->makeFrame(GE161::Game::basePath() + "paddle.png", 0, 0);
	paddle_sprite_sheet->addFrameToSequence("paddling", p);
	right_paddle->attachSprite(paddle_sprite_sheet);

	left_paddle = new GE161::GameObject(40, theGame->window()->clientHeight() / 2);
	left_paddle->attachSprite(paddle_sprite_sheet);

	wall = new GE161::GameObject(theGame->window()->clientWidth() / 2 - 20, theGame->window()->clientHeight() / 2);
	GE161::Sprite* wall_sprite = new GE161::Sprite(20, 40);
	int w = wall_sprite->makeFrame(GE161::Game::basePath() + "movingwall.png", 0, 0);
	wall_sprite->addFrameToSequence("walling", w);
	wall->attachSprite(wall_sprite);


	pow = new GE161::GameObject(theGame->window()->clientWidth() / 2, theGame->window()->clientHeight() / 2);
	short pow_frame_width = 85;
	short pow_frame_height = 80;
	GE161::Sprite* pow_sprite = new GE161::Sprite(pow_frame_width, pow_frame_height);
	int p_int = pow_sprite->makeFrame(GE161::Game::basePath() + "pow.png", 0, 0);
	pow_sprite->addFrameToSequence("powing", p_int);
	pow->attachSprite(pow_sprite);

	thedude = new GE161::GameObject(theGame->window()->clientWidth() / 2, theGame->window()->clientHeight() - 80);
	short dude_frame_width = 65;
	short dude_frame_height = 80;
	GE161::Sprite* dude_sprite = new GE161::Sprite(dude_frame_width, dude_frame_height);
	int d1 = dude_sprite->makeFrame(GE161::Game::basePath() + "thedude.png", 0, 0);
	int d2 = dude_sprite->makeFrame(GE161::Game::basePath() + "thedude.png", 65, 0);
	dude_sprite ->addFrameToSequence("normal", d1);
	dude_sprite->addFrameToSequence("excited", d2);
	thedude->attachSprite(dude_sprite);

	x_delta = y_delta = wall_delta_y = 1;
	x_delta2 = y_delta2 = -1;
	bounceCount_ = 0;

	// seed the random number generator with the current time
	srand(static_cast<unsigned int>(time(NULL)));

	return true;
}

int PongGamePlayScene::draw()
{
	texty1->write("Score " + std::to_string(score), 250, 20);
	ball->moveX(x_delta);
	ball->moveY(y_delta);
	ball->draw("Rolling");
	ball2->moveX(x_delta2);
	ball2->moveY(y_delta2);
	ball2->draw("Rolling");


	wall->moveY(wall_delta_y);
	wall->draw("walling");

	if (wall->getY() <= 0 || wall->getY() >= theGame->window()->clientHeight() - 40){
		wall_delta_y *= -1;
	}

	if (drawPow){
		pow->draw("powing");
		thedude->draw("excited");
		if (theGame->getTicks() > startDrawTime + timetolive)
			drawPow = false;
	}
	else{
		thedude->draw("normal");
	}

	left_paddle->draw("paddling");
	right_paddle->draw("paddling");

	if (right_paddle->overlapsWith(*ball))
	{
		x_delta = -(rand() % 3 + 1);
		theGame->SendEvent(1);
	}
	if (left_paddle->overlapsWith(*ball))
	{
		x_delta = rand() % 3 + 1;
		theGame->SendEvent(1);
	}

	if (right_paddle->overlapsWith(*ball2))
	{
		x_delta2 = -(rand() % 3 + 1);
		theGame->SendEvent(1);
	}
	if (left_paddle->overlapsWith(*ball2))
	{
		x_delta2 = rand() % 3 + 1;
		theGame->SendEvent(1);
	}

	if (ball->overlapsWith(*wall)){
		if (ball->getX() < wall->getX()){
			x_delta = -(rand() % 3 + 1);
		}
		else{
			x_delta = (rand() % 3 + 1);
		}
	}

	if (ball2->overlapsWith(*wall)){
		if (ball2->getX() < wall->getX()){
			x_delta2 = -(rand() % 3 + 1);
		}
		else{
			x_delta2 = (rand() % 3 + 1);
		}
	}

	// If the ball has hit an edge, bounce randomly.
	if (ball->getX() < 0)
	{
		x_delta = rand() % 3 + 1;
	}
	if (ball->getY() < 0)
	{
		y_delta = rand() % 3 + 1;
	}
	if (ball->getX() + frameWidth_ >= theGame->window()->clientWidth())
	{
		x_delta = -(rand() % 3 + 1);
		bounceCount_++;
		score++;
	}
	if (ball->getY() + frameHeight_ >= theGame->window()->clientHeight())
	{
		y_delta = -(rand() % 3 + 1);
	}

	if (ball2->getX() < 0)
	{
		x_delta2 = rand() % 3 + 1;
	}
	if (ball2->getY() < 0)
	{
		y_delta2 = rand() % 3 + 1;
	}
	if (ball2->getX() + frameWidth_ >= theGame->window()->clientWidth())
	{
		x_delta2 = -(rand() % 3 + 1);
		bounceCount_++;
		score++;
	}
	if (ball2->getY() + frameHeight_ >= theGame->window()->clientHeight())
	{
		y_delta2 = -(rand() % 3 + 1);
	}


	if (bounceCount_ <= 8)
	{
		return GE161::Game::CONTINUE_SCENE;
	}
	else     // bounced out
	{
		return -1;  // stop game
	}
}


void PongGamePlayScene::onEvent(GE161::Event& event)
{
	if (event.type == GE161::Event::KEY_DOWN)  // this test isn't necessary
	{
		if (event.key == "UP"){
			right_paddle->moveY(-5);

			if (right_paddle->getY() <= 0){
				right_paddle->setPos(right_paddle->getX(), 0);
			}
			
		}
		else if (event.key == "DOWN"){
			right_paddle->moveY(5);

			if (right_paddle->getY() >= theGame->window()->clientHeight() - 100){
				right_paddle->setPos(right_paddle->getX(), theGame->window()->clientHeight() - 100);
			}
		}
		else if (event.key == "BACKSPACE"){
			ball->setPos(theGame->window()->clientWidth() / 2, theGame->window()->clientHeight() / 2);
		}
	}

	if (event.type == GE161::Event::HIT_EVENT){
		startDrawTime = theGame->getTicks();
		drawPow = true;
	}
}